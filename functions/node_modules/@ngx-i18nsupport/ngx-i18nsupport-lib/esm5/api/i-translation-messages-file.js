/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The Common interface of XliffFile and XmbFile.
 * The merge process only uses this interface.
 * Created by martin on 10.03.2017.
 * @record
 */
export function ITranslationMessagesFile() { }
if (false) {
    /**
     * File format as it is used in config files.
     * Currently 'xlf', 'xlf2', 'xmb', 'xtb'
     * Returns one of the constants FORMAT_..
     * @return {?}
     */
    ITranslationMessagesFile.prototype.i18nFormat = function () { };
    /**
     * File type as displayable, human readable string.
     * Currently 'XLIFF 1.2', 'XLIFF 2.0' or 'XMB' / 'XTB'
     * Returns one of the constants FILETYPE_..
     * @return {?}
     */
    ITranslationMessagesFile.prototype.fileType = function () { };
    /**
     * warnings found in the file
     * @return {?}
     */
    ITranslationMessagesFile.prototype.warnings = function () { };
    /**
     * Total number of translation units found in the file.
     * @return {?}
     */
    ITranslationMessagesFile.prototype.numberOfTransUnits = function () { };
    /**
     * Number of translation units without translation found in the file.
     * These units have state 'translated'.
     * @return {?}
     */
    ITranslationMessagesFile.prototype.numberOfUntranslatedTransUnits = function () { };
    /**
     * Number of translation units with state 'final'.
     * @return {?}
     */
    ITranslationMessagesFile.prototype.numberOfReviewedTransUnits = function () { };
    /**
     * Number of translation units without id found in the file.
     * @return {?}
     */
    ITranslationMessagesFile.prototype.numberOfTransUnitsWithMissingId = function () { };
    /**
     * Get source language.
     * @return {?} source language.
     */
    ITranslationMessagesFile.prototype.sourceLanguage = function () { };
    /**
     * Get target language.
     * @return {?} target language.
     */
    ITranslationMessagesFile.prototype.targetLanguage = function () { };
    /**
     * Loop over all Translation Units.
     * @param {?} callback callback
     * @return {?}
     */
    ITranslationMessagesFile.prototype.forEachTransUnit = function (callback) { };
    /**
     * Get trans-unit with given id.
     * @param {?} id id
     * @return {?} trans-unit with given id.
     */
    ITranslationMessagesFile.prototype.transUnitWithId = function (id) { };
    /**
     * Edit the source language.
     * @param {?} language language
     * @return {?}
     */
    ITranslationMessagesFile.prototype.setSourceLanguage = function (language) { };
    /**
     * Edit the target language.
     * @param {?} language language
     * @return {?}
     */
    ITranslationMessagesFile.prototype.setTargetLanguage = function (language) { };
    /**
     * Set the praefix used when copying source to target.
     * This is used by importNewTransUnit and createTranslationFileForLang methods.
     * (since 1.8.0)
     * @param {?} targetPraefix targetPraefix
     * @return {?}
     */
    ITranslationMessagesFile.prototype.setNewTransUnitTargetPraefix = function (targetPraefix) { };
    /**
     * Get the praefix used when copying source to target.
     * (since 1.8.0)
     * @return {?} praefix used when copying source to target.
     */
    ITranslationMessagesFile.prototype.getNewTransUnitTargetPraefix = function () { };
    /**
     * Set the suffix used when copying source to target.
     * This is used by importNewTransUnit and createTranslationFileForLang methods.
     * (since 1.8.0)
     * @param {?} targetSuffix targetSuffix
     * @return {?}
     */
    ITranslationMessagesFile.prototype.setNewTransUnitTargetSuffix = function (targetSuffix) { };
    /**
     * Get the suffix used when copying source to target.
     * (since 1.8.0)
     * @return {?} suffix used when copying source to target.
     */
    ITranslationMessagesFile.prototype.getNewTransUnitTargetSuffix = function () { };
    /**
     * Add a new trans-unit to this file.
     * The trans unit stems from another file.
     * It copies the source content of the tu to the target content too,
     * depending on the values of isDefaultLang and copyContent.
     * So the source can be used as a dummy translation.
     * (used by xliffmerge)
     * @throws an error if trans-unit with same id already is in the file.
     * @param {?} foreignTransUnit the trans unit to be imported.
     * @param {?} isDefaultLang Flag, wether file contains the default language.
     * Then source and target are just equal.
     * The content will be copied.
     * State will be final.
     * @param {?} copyContent Flag, wether to copy content or leave it empty.
     * Wben true, content will be copied from source.
     * When false, content will be left empty (if it is not the default language).
     * @param {?=} importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.
     * Newly imported trans unit is then inserted directly after this element.
     * If not set or not part of this file, new unit will be imported at the end.
     * If explicity set to null, new unit will be imported at the start.
     * @return {?} the newly imported trans unit (since version 1.7.0)
     */
    ITranslationMessagesFile.prototype.importNewTransUnit = function (foreignTransUnit, isDefaultLang, copyContent, importAfterElement) { };
    /**
     * Remove the trans-unit with the given id.
     * @param {?} id id
     * @return {?}
     */
    ITranslationMessagesFile.prototype.removeTransUnitWithId = function (id) { };
    /**
     * The filename where the data is read from.
     * @return {?}
     */
    ITranslationMessagesFile.prototype.filename = function () { };
    /**
     * The encoding if the xml content (UTF-8, ISO-8859-1, ...)
     * @return {?}
     */
    ITranslationMessagesFile.prototype.encoding = function () { };
    /**
     * The xml content to be saved after changes are made.
     * @param {?=} beautifyOutput Flag whether to use pretty-data to format the output.
     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.
     * See issue #64 for details.
     * Default is false.
     * @return {?}
     */
    ITranslationMessagesFile.prototype.editedContent = function (beautifyOutput) { };
    /**
     * Create a new translation file for this file for a given language.
     * Normally, this is just a copy of the original one.
     * But for XMB the translation file has format 'XTB'.
     * @param {?} lang Language code
     * @param {?} filename expected filename to store file
     * @param {?} isDefaultLang Flag, wether file contains the default language.
     * Then source and target are just equal.
     * The content will be copied.
     * State will be final.
     * @param {?} copyContent Flag, wether to copy content or leave it empty.
     * Wben true, content will be copied from source.
     * When false, content will be left empty (if it is not the default language).
     * @return {?}
     */
    ITranslationMessagesFile.prototype.createTranslationFileForLang = function (lang, filename, isDefaultLang, copyContent) { };
}
//# sourceMappingURL=data:application/json;base64,