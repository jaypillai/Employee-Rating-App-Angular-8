/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { format, isNullOrUndefined, isString } from 'util';
var MessageCategory = /** @class */ (function () {
    function MessageCategory(_category, _message) {
        this._category = _category;
        this._message = _message;
    }
    /**
     * @return {?}
     */
    MessageCategory.prototype.getCategory = /**
     * @return {?}
     */
    function () {
        return this._category;
    };
    /**
     * @return {?}
     */
    MessageCategory.prototype.getMessageNormalized = /**
     * @return {?}
     */
    function () {
        return this._message;
    };
    return MessageCategory;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    MessageCategory.prototype._category;
    /**
     * @type {?}
     * @private
     */
    MessageCategory.prototype._message;
}
/**
 * Implementation of an ICU Message.
 * Created by martin on 05.06.2017.
 */
var /**
 * Implementation of an ICU Message.
 * Created by martin on 05.06.2017.
 */
ICUMessage = /** @class */ (function () {
    function ICUMessage(_parser, isPluralMessage) {
        this._parser = _parser;
        this._isPluralMessage = isPluralMessage;
        this._categories = [];
    }
    /**
     * @param {?} category
     * @param {?} message
     * @return {?}
     */
    ICUMessage.prototype.addCategory = /**
     * @param {?} category
     * @param {?} message
     * @return {?}
     */
    function (category, message) {
        this._categories.push(new MessageCategory(category, message));
    };
    /**
     * ICU message as native string.
     * This is, how it is stored, something like '{x, plural, =0 {..}'
     * @return ICU message as native string.
     */
    /**
     * ICU message as native string.
     * This is, how it is stored, something like '{x, plural, =0 {..}'
     * @return {?} ICU message as native string.
     */
    ICUMessage.prototype.asNativeString = /**
     * ICU message as native string.
     * This is, how it is stored, something like '{x, plural, =0 {..}'
     * @return {?} ICU message as native string.
     */
    function () {
        /** @type {?} */
        var varname = (this.isPluralMessage()) ? 'VAR_PLURAL' : 'VAR_SELECT';
        /** @type {?} */
        var type = (this.isPluralMessage()) ? 'plural' : 'select';
        /** @type {?} */
        var choiceString = '';
        this._categories.forEach((/**
         * @param {?} category
         * @return {?}
         */
        function (category) {
            choiceString = choiceString + format(' %s {%s}', category.getCategory(), category.getMessageNormalized().asNativeString());
        }));
        return format('{%s, %s,%s}', varname, type, choiceString);
    };
    /**
     * Is it a plural message?
     */
    /**
     * Is it a plural message?
     * @return {?}
     */
    ICUMessage.prototype.isPluralMessage = /**
     * Is it a plural message?
     * @return {?}
     */
    function () {
        return this._isPluralMessage;
    };
    /**
     * Is it a select message?
     */
    /**
     * Is it a select message?
     * @return {?}
     */
    ICUMessage.prototype.isSelectMessage = /**
     * Is it a select message?
     * @return {?}
     */
    function () {
        return !this._isPluralMessage;
    };
    /**
     * All the parts of the message.
     * E.g. the ICU message {wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}
     * has 4 category objects with the categories =0, =1, =2, other.
     */
    /**
     * All the parts of the message.
     * E.g. the ICU message {wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}
     * has 4 category objects with the categories =0, =1, =2, other.
     * @return {?}
     */
    ICUMessage.prototype.getCategories = /**
     * All the parts of the message.
     * E.g. the ICU message {wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}
     * has 4 category objects with the categories =0, =1, =2, other.
     * @return {?}
     */
    function () {
        return this._categories;
    };
    /**
     * Translate message and return a new, translated message
     * @param translation the translation (hashmap of categories and translations).
     * @return new message wit translated content.
     * @throws an error if translation does not match the message.
     * This is the case, if there are categories not contained in the original message.
     */
    /**
     * Translate message and return a new, translated message
     * @throws an error if translation does not match the message.
     * This is the case, if there are categories not contained in the original message.
     * @param {?} translation the translation (hashmap of categories and translations).
     * @return {?} new message wit translated content.
     */
    ICUMessage.prototype.translate = /**
     * Translate message and return a new, translated message
     * @throws an error if translation does not match the message.
     * This is the case, if there are categories not contained in the original message.
     * @param {?} translation the translation (hashmap of categories and translations).
     * @return {?} new message wit translated content.
     */
    function (translation) {
        var _this = this;
        /** @type {?} */
        var message = new ICUMessage(this._parser, this.isPluralMessage());
        /** @type {?} */
        var translatedCategories = new Set();
        this._categories.forEach((/**
         * @param {?} category
         * @return {?}
         */
        function (category) {
            /** @type {?} */
            var translatedMessage;
            /** @type {?} */
            var translationForCategory = translation[category.getCategory()];
            if (isNullOrUndefined(translationForCategory)) {
                translatedMessage = category.getMessageNormalized();
            }
            else if (isString(translationForCategory)) {
                translatedCategories.add(category.getCategory());
                translatedMessage = _this._parser.parseNormalizedString((/** @type {?} */ (translationForCategory)), null);
            }
            else {
                // TODO embedded ICU Message
                translatedMessage = null;
            }
            message.addCategory(category.getCategory(), translatedMessage);
        }));
        // new categories, which are not part of the original message
        Object.keys(translation).forEach((/**
         * @param {?} categoryName
         * @return {?}
         */
        function (categoryName) {
            if (!translatedCategories.has(categoryName)) {
                if (_this.isSelectMessage()) {
                    throw new Error(format('adding a new category not allowed for select messages ("%s" is not part of message)', categoryName));
                }
                else {
                    _this.checkValidPluralCategory(categoryName);
                    // TODO embedded ICU Message
                    /** @type {?} */
                    var translatedMessage = _this._parser.parseNormalizedString((/** @type {?} */ (translation[categoryName])), null);
                    message.addCategory(categoryName, translatedMessage);
                }
            }
        }));
        return message;
    };
    /**
     * Check, wether category is valid plural category.
     * Allowed are =n, 'zero', 'one', 'two', 'few', 'many' and 'other'
     * @param categoryName category
     * @throws an error, if it is not a valid category name
     */
    /**
     * Check, wether category is valid plural category.
     * Allowed are =n, 'zero', 'one', 'two', 'few', 'many' and 'other'
     * @throws an error, if it is not a valid category name
     * @private
     * @param {?} categoryName category
     * @return {?}
     */
    ICUMessage.prototype.checkValidPluralCategory = /**
     * Check, wether category is valid plural category.
     * Allowed are =n, 'zero', 'one', 'two', 'few', 'many' and 'other'
     * @throws an error, if it is not a valid category name
     * @private
     * @param {?} categoryName category
     * @return {?}
     */
    function (categoryName) {
        /** @type {?} */
        var allowedKeywords = ['zero', 'one', 'two', 'few', 'many', 'other'];
        if (categoryName.match(/=\d+/)) {
            return;
        }
        if (allowedKeywords.find((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return key === categoryName; }))) {
            return;
        }
        throw new Error(format('invalid plural category "%s", allowed are =<n> and %s', categoryName, allowedKeywords));
    };
    return ICUMessage;
}());
/**
 * Implementation of an ICU Message.
 * Created by martin on 05.06.2017.
 */
export { ICUMessage };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ICUMessage.prototype._isPluralMessage;
    /**
     * @type {?}
     * @private
     */
    ICUMessage.prototype._categories;
    /**
     * @type {?}
     * @private
     */
    ICUMessage.prototype._parser;
}
//# sourceMappingURL=data:application/json;base64,